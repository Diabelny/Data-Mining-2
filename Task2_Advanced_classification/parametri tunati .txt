param_grid = {
    'tol':(1.0, 1e-1, 1e-2, 1e-3, 1e-4, 1e-5, 1e-6),
    'C': (0.001, 0.05, 0.01, 0.1, 1.0, 10.0, 50, 100.0),
    'multi_class' : ["auto","ovr","multinomial"],
    'solver':["lbfgs", "liblinear", "newton-cg", "newton-cholesky", "sag", "saga"],
    'max_iter' :[800]
    
}




Log reg


from sklearn.model_selection import GridSearchCV

#Set the parameters by cross-validation
param_grid = {
    'tol':(1.0, 1e-1, 1e-2, 1e-3, 1e-4, 1e-5, 1e-6),
    'C': (0.001, 0.05, 0.01, 0.1, 1.0, 10.0, 50, 100.0),
    'loss' : ["hinge", "squared_hinge"],
    'multi_class':["ovr","crammer_singer"]

}
# Set the parameters by cross-validation
grid = GridSearchCV(
    LinearSVC(),
    param_grid=param_grid,
    cv=StratifiedKFold(), # 
    refit=True,
    scoring="f1_macro",
    n_jobs=-1
)
grid.fit(X_train, y_train)
clf = grid.best_estimator_

InÂ [16]:

# Set the parameters by cross-validation
param_grid = {
    'kernel' : ('linear', 'rbf', 'poly', 'sigmoid'),
    'C': (0.001, 0.05, 0.01, 0.1, 1.0, 10.0, 50, 100.0),
    'tol': (1.0, 1e-1, 1e-2, 1e-3, 1e-4, 1e-5, 1e-6),
    'decision_function_shape':["ovo", "ovr"]
    }


# Set the parameters by cross-validation
grid = GridSearchCV(
    SVC(),
    param_grid=param_grid,
    cv=StratifiedKFold(), # 
    refit=True,
    scoring="f1_macro",
    n_jobs=-1
)
grid.fit(X_train, y_train)
clf = grid.best_estimator_









# Set the parameters by cross-validation
param_grid = {
    
'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]    
   

    }


# Set the parameters by cross-validation
grid = GridSearchCV(
    RandomForestClassifier(max_depth=10, min_samples_split=2, min_samples_leaf=20),
    param_grid=param_grid,
    cv=StratifiedKFold(), # 
    refit=True,
    scoring="f1_macro",
    n_jobs=-1
)
grid.fit(X_train, y_train)
clf = grid.best_estimator_

